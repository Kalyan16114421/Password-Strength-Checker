import re

def assess_password_strength(password):
    """
    Assesses the strength of a password and provides detailed feedback.

    Args:
        password: The password string to assess.

    Returns:
        A tuple containing the strength description and a dictionary of criteria met.
    """

    strength_score = 0
    criteria = {
        "length": False,
        "uppercase": False,
        "lowercase": False,
        "digit": False,
        "special_char": False,
}

    # Length criteria
    length = len(password)
    if length >= 8:
        strength_score += 20
        criteria["length"] = True

    # Character type criteria
    if re.search(r'[A-Z]', password):
        strength_score += 20
        criteria["uppercase"] = True

    if re.search(r'[a-z]', password):
        strength_score += 20
        criteria["lowercase"] = True

    if re.search(r'[0-9]', password):
        strength_score += 20
        criteria["digit"] = True

    if re.search(r'[!@#$%^&*(),.?":{}|<>]', password):
        strength_score += 20
        criteria["special_char"] = True

    # Determine strength description
    if strength_score >= 80:
        strength = "Strong"
    elif strength_score >= 60:
        strength = "Moderate"
    elif strength_score >= 40:
        strength = "Weak"
    else:
        strength = "Very Weak"

    return strength, criteria


# Example usage
password_input = input("Enter a password: ") #Password visible

strength, criteria_met = assess_password_strength(password_input)

print(f"Password Strength: {strength}")
print("Criteria met:")
for criterion, met in criteria_met.items():
    print(f"- {criterion}: {'âœ“' if met else 'X'}")